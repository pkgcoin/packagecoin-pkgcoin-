import hashlib
import time

class Block:
    def __init__(self, index, previous_hash, timestamp, data, hash):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.data = data
        self.hash = hash

def calculate_hash(index, previous_hash, timestamp, data):
    value = str(index) + str(previous_hash) + str(timestamp) + str(data)
    return hashlib.sha256(value.encode('utf-8')).hexdigest()

def create_genesis_block():
    return Block(0, "0", int(time.time()), "Genesis", calculate_hash(0, "0", int(time.time()), "Genesis"))

class ProofOfCapacityBlock(Block):
    def __init__(self, index, previous_hash, timestamp, data, hash, capacity_proof):
        super().__init__(index, previous_hash, timestamp, data, hash)
        self.capacity_proof = capacity_proof

def mine_block(previous_block, data, capacity_proof):
    index = previous_block.index + 1
    timestamp = int(time.time())
    hash = calculate_hash(index, previous_block.hash, timestamp, data)
    return ProofOfCapacityBlock(index, previous_block.hash, timestamp, data, hash, capacity_proof)

# Initialize blockchain
blockchain = [create_genesis_block()]
previous_block = blockchain[0]

# Example data and capacity proof
data = "Transaction Data"
capacity_proof = "Proof of Capacity"

# Mine new blocks
num_blocks_to_mine = 5
for _ in range(num_blocks_to_mine):
    new_block = mine_block(previous_block, data, capacity_proof)
    blockchain.append(new_block)
    previous_block = new_block

# Print blockchain information
for block in blockchain:
    print(f"Block #{block.index} - Hash: {block.hash} - Capacity Proof: {block.capacity_proof}")
